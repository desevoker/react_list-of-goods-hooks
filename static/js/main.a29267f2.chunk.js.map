{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","DisplayOrder","goodsFromServer","App","useState","NoSort","sortType","setSortType","Normal","displayOrder","setDisplayOrder","isResetButtonActive","preparedGoods","goods","sort","a","b","Alphabetically","localeCompare","Length","length","Reverse","reverse","getPreparedGoods","className","type","cn","onClick","prevOrder","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,EAMAC,E,0EAnBQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGF,O,mBAAAA,I,mCAAAA,I,oBAAAA,M,cAMAC,O,mBAAAA,I,sBAAAA,M,KAkCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASJ,EAASK,QAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwCH,mBAASH,EAAaO,QAA9D,mBAAOC,EAAP,KAAqBC,EAArB,KAeMC,EAAsBL,GAAYG,EAElCG,EAhDR,SACEC,EACAP,EACAG,GAEA,IAAMG,EAAa,YAAOC,GAqB1B,OAnBIP,IAAaN,EAASK,QACxBO,EAAcE,MAAK,SAACC,EAAGC,GACrB,OAAQV,GACN,KAAKN,EAASiB,eACZ,OAAOF,EAAEG,cAAcF,GAEzB,KAAKhB,EAASmB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,MAKXX,IAAiBR,EAAaoB,SAChCT,EAAcU,UAGTV,EAsBeW,CACpBrB,EACAI,EACAG,GAGF,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYpB,IAAaN,EAASiB,iBAEpCU,QAAS,kBAAMpB,EAAYP,EAASiB,iBALtC,iCAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYpB,IAAaN,EAASmB,SAEpCQ,QAAS,kBAAMpB,EAAYP,EAASmB,SALtC,4BAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYjB,IAAiBR,EAAaoB,UAE5CM,QAjDmB,WACzBjB,GAAgB,SAAAkB,GACd,OAAOA,IAAc3B,EAAaO,OAC9BP,EAAaoB,QACbpB,EAAaO,WAwCf,qBAUCG,GACC,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAlDgB,WACxBpB,EAAYP,EAASK,QACrBK,EAAgBT,EAAaO,SA6CvB,sBAUJ,6BACGI,EAAciB,KAAI,SAAAC,GAAI,OACrB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC/HjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a29267f2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NoSort,\n  Alphabetically,\n  Length,\n}\n\nenum DisplayOrder {\n  Normal,\n  Reverse,\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortType: SortType,\n  displayOrder: DisplayOrder,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortType !== SortType.NoSort) {\n    preparedGoods.sort((a, b) => {\n      switch (sortType) {\n        case SortType.Alphabetically:\n          return a.localeCompare(b);\n\n        case SortType.Length:\n          return a.length - b.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (displayOrder === DisplayOrder.Reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NoSort);\n  const [displayOrder, setDisplayOrder] = useState(DisplayOrder.Normal);\n\n  const toggleDisplayOrder = () => {\n    setDisplayOrder(prevOrder => {\n      return prevOrder === DisplayOrder.Normal\n        ? DisplayOrder.Reverse\n        : DisplayOrder.Normal;\n    });\n  };\n\n  const handleResetButton = () => {\n    setSortType(SortType.NoSort);\n    setDisplayOrder(DisplayOrder.Normal);\n  };\n\n  const isResetButtonActive = sortType || displayOrder;\n\n  const preparedGoods = getPreparedGoods(\n    goodsFromServer,\n    sortType,\n    displayOrder,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortType !== SortType.Alphabetically,\n          })}\n          onClick={() => setSortType(SortType.Alphabetically)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortType !== SortType.Length,\n          })}\n          onClick={() => setSortType(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': displayOrder !== DisplayOrder.Reverse,\n          })}\n          onClick={toggleDisplayOrder}\n        >\n          Reverse\n        </button>\n\n        {isResetButtonActive && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleResetButton}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}