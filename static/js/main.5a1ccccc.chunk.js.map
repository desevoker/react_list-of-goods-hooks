{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","DisplayOrder","goodsFromServer","App","useState","NoSort","sortBy","setSortBy","Normal","displayOrder","setDisplayOrder","isOptionsEnabled","goods","preparedGoods","sort","a","b","Name","localeCompare","Length","length","Reverse","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,EAMAC,E,0EAnBQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGF,O,mBAAAA,I,eAAAA,I,oBAAAA,M,cAMAC,O,mBAAAA,I,sBAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,MAGIC,mBAAmBJ,EAASK,QAHhC,mBACEC,EADF,KAEEC,EAFF,KAKA,EAGIH,mBAAuBH,EAAaO,QAHxC,mBACEC,EADF,KAEEC,EAFF,KAkBMC,EAAmBL,IAAWN,EAASK,QACjBI,IAAiBR,EAAaO,OAEpDI,EAvDR,SACEA,EADF,GAGG,IADCN,EACF,EADEA,OAAQG,EACV,EADUA,aAEJI,EAAa,YAAOD,GAqB1B,OAnBIN,IAAWN,EAASK,QACtBQ,EAAcC,MAAK,SAACC,EAAGC,GACrB,OAAQV,GACN,KAAKN,EAASiB,KACZ,OAAOF,EAAEG,cAAcF,GAEzB,KAAKhB,EAASmB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,MAKXX,IAAiBR,EAAaoB,SAChCR,EAAcS,UAGTT,EA8BOU,CAAiBrB,EAAiB,CAAEI,SAAQG,iBAE1D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYpB,IAAWN,EAASiB,OAElCU,QAAS,kBAAMpB,EAAUP,EAASiB,OALpC,iCAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYpB,IAAWN,EAASmB,SAElCQ,QAAS,kBAAMpB,EAAUP,EAASmB,SALpC,4BAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYjB,IAAiBR,EAAaoB,UAE5CM,QA9CmB,WACzBjB,EACED,IAAiBR,EAAaO,OAC1BP,EAAaoB,QACbpB,EAAaO,SAqCf,qBAUCG,GACC,wBACEc,KAAK,SACLD,UAAU,4BACVG,QA/CkB,WAC1BpB,EAAUP,EAASK,QACnBK,EAAgBT,EAAaO,SA0CvB,sBAUJ,6BACGI,EAAMgB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCtIlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5a1ccccc.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport React, { useState } from 'react';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NoSort,\n  Name,\n  Length,\n}\n\nenum DisplayOrder {\n  Normal,\n  Reverse,\n}\n\ntype DisplayOptions = {\n  sortBy: SortType;\n  displayOrder: DisplayOrder;\n};\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortBy, displayOrder }: DisplayOptions,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortBy !== SortType.NoSort) {\n    preparedGoods.sort((a, b) => {\n      switch (sortBy) {\n        case SortType.Name:\n          return a.localeCompare(b);\n\n        case SortType.Length:\n          return a.length - b.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (displayOrder === DisplayOrder.Reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [\n    sortBy,\n    setSortBy,\n  ] = useState<SortType>(SortType.NoSort);\n\n  const [\n    displayOrder,\n    setDisplayOrder,\n  ] = useState<DisplayOrder>(DisplayOrder.Normal);\n\n  const toggleDisplayOrder = () => {\n    setDisplayOrder(\n      displayOrder === DisplayOrder.Normal\n        ? DisplayOrder.Reverse\n        : DisplayOrder.Normal,\n    );\n  };\n\n  const resetDisplayOptions = () => {\n    setSortBy(SortType.NoSort);\n    setDisplayOrder(DisplayOrder.Normal);\n  };\n\n  const isOptionsEnabled = sortBy !== SortType.NoSort\n                           || displayOrder !== DisplayOrder.Normal;\n\n  const goods = getPreparedGoods(goodsFromServer, { sortBy, displayOrder });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortBy !== SortType.Name,\n          })}\n          onClick={() => setSortBy(SortType.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortBy !== SortType.Length,\n          })}\n          onClick={() => setSortBy(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': displayOrder !== DisplayOrder.Reverse,\n          })}\n          onClick={toggleDisplayOrder}\n        >\n          Reverse\n        </button>\n\n        {isOptionsEnabled && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetDisplayOptions}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}